#!/usr/bin/env bash

composerDockerImage="composer:1.9.3";
cypressDockerImage="cypress/included:3.5.0";
nodeDockerImage="node:12.12.0";

# Reset
Reset="\033[0m"; # Text Reset

# Regular Colors
Black="\033[0;30m"; # Black
Red="\033[0;31m"; # Red
Green="\033[0;32m"; # Green
Yellow="\033[0;33m"; # Yellow
Blue="\033[0;34m"; # Blue
Purple="\033[0;35m"; # Purple
Cyan="\033[0;36m"; # Cyan
White="\033[0;37m"; # White

# Bold
BBlack="\033[1;30m"; # Black
BRed="\033[1;31m"; # Red
BGreen="\033[1;32m"; # Green
BYellow="\033[1;33m"; # Yellow
BBlue="\033[1;34m"; # Blue
BPurple="\033[1;35m"; # Purple
BCyan="\033[1;36m"; # Cyan
BWhite="\033[1;37m"; # White

cmd=${1};
allArgs=${@};
allArgsExceptFirst=${@:2};
secondArg=${2};

isMacOs=false;
composeFiles="-f docker-compose.yml -f docker-compose.dev.yml";

if [[ "$(uname)" = "Darwin" ]] || [[ "$(uname)" = "darwin" ]]; then
    isMacOs=true;
    composeFiles="-f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.dev.sync.yml";
fi

## If no command provided, list commands
if [[ -z "${cmd}" ]]; then
    valid=true;
    printf "${Green}The following commands are available:\n${Yellow}";
    printf "  ./dev up\n";
    printf "  ./dev down\n";
    printf "  ./dev provision\n";
    printf "  ./dev login [args]\n";
    printf "  ./dev cli [args]\n";
    printf "  ./dev yarn [args]\n";
    printf "  ./dev composer [args]\n";
    printf "  ./dev phpcs\n";
    printf "  ./dev phpcbf\n";
    printf "  ./dev psalm\n";
    printf "  ./dev phpstan\n";
    printf "  ./dev phpunit [args]\n";
    printf "  ./dev eslint\n";
    printf "  ./dev cypress\n";
    printf "  ./dev cypress-interactive${Reset}\n";
    exit 0;
fi

if [[ "${cmd}" = "up" ]]; then
    chmod -R 0777 storage;
    chmod -R 0777 secure-storage;
    docker-compose ${composeFiles} -p buzzingpixel build;
    docker-compose ${composeFiles} -p buzzingpixel up -d;
    exit 0;
fi

if [[ "${cmd}" = "down" ]]; then
    docker-compose ${composeFiles} -p buzzingpixel down;
    exit 0;
fi

if [[ "${cmd}" = "provision" ]]; then
    docker build -t buzzingpixel:php-dev docker/php-dev;
    docker run -it -v ${PWD}:/app -v buzzingpixel_composer-home-volume:/composer-home-volume --env COMPOSER_HOME=/composer-home-volume -w /app ${composerDockerImage} bash -c "composer install";
    if [[ "${isMacOs}" = "provision" ]]; then
        docker run -it -v ${PWD}:/app -v buzzingpixel_node-modules-volume:/app/node_modules -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app ${nodeDockerImage} bash -c "yarn";
        docker run -it -v ${PWD}:/app -v buzzingpixel_node-modules-volume:/app/node_modules -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app ${nodeDockerImage} bash -c "yarn run fab --build-only";
    else
        docker run -it -v ${PWD}:/app -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app ${nodeDockerImage} bash -c "yarn";
        docker run -it -v ${PWD}:/app -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app ${nodeDockerImage} bash -c "yarn run fab --build-only";
    fi
    (cd platform && yarn && cd ..)
    docker exec -it --user root --workdir /opt/project buzzingpixel-php bash -c "php cli app-setup:setup-docker-database";
    exit 0;
fi

if [[ "${cmd}" = "login" ]]; then
    docker exec -it --user root --workdir /opt/project buzzingpixel-${secondArg} bash;
    exit 0;
fi

if [[ "${cmd}" = "cli" ]]; then
    docker exec -it --user root --workdir /opt/project buzzingpixel-php bash -c "php cli ${allArgsExceptFirst}";
    exit 0;
fi

if [[ "${cmd}" = "yarn" ]]; then
    if [[ "${isMacOs}" = "true" ]]; then
        docker run -it -p 3000:3000 -p 3001:3001 -v ${PWD}:/app -v buzzingpixel_node-modules-volume:/app/node_modules -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app --network=buzzingpixel_common-buzzingpixel-network ${nodeDockerImage} bash -c "${allArgs}";
    else
        docker run -it -p 3000:3000 -p 3001:3001 -v ${PWD}:/app -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app --network=buzzingpixel_common-buzzingpixel-network ${nodeDockerImage} bash -c "${allArgs}";
    fi
    exit 0;
fi

if [[ "${cmd}" = "composer" ]]; then
    docker run -it -v ${PWD}:/app -v buzzingpixel_composer-home-volume:/composer-home-volume --env COMPOSER_HOME=/composer-home-volume -w /app ${composerDockerImage} bash -c "${allArgs}";
    exit 0;
fi

if [[ "${cmd}" = "phpcs" ]]; then
    docker run -it -v ${PWD}:/app -w /app buzzingpixel:php-dev bash -c "vendor/bin/phpcs --config-set installed_paths ../../doctrine/coding-standard/lib,../../slevomat/coding-standard; vendor/bin/phpcs src public/index.php config; vendor/bin/php-cs-fixer fix --verbose --dry-run --using-cache=no;";
    exit 0;
fi

if [[ "${cmd}" = "phpcbf" ]]; then
    docker run -it -v ${PWD}:/app -w /app buzzingpixel:php-dev bash -c "vendor/bin/phpcbf --config-set installed_paths ../../doctrine/coding-standard/lib,../../slevomat/coding-standard; vendor/bin/phpcbf src public/index.php config; vendor/bin/php-cs-fixer fix --verbose --using-cache=no;";
    exit 0;
fi

if [[ "${cmd}" = "psalm" ]]; then
    docker run -it -v ${PWD}:/app -w /app buzzingpixel:php-dev bash -c "php -d memory_limit=4G /app/vendor/vimeo/psalm/psalm";
    exit 0;
fi

if [[ "${cmd}" = "phpstan" ]]; then
    docker run -it -v ${PWD}:/app -w /app buzzingpixel:php-dev bash -c "php -d memory_limit=4G /app/vendor/phpstan/phpstan/bin/phpstan analyse config public/index.php src tests cli";
    exit 0;
fi

if [[ "${cmd}" = "phpunit" ]]; then
    docker run -it -v ${PWD}:/app -w /app buzzingpixel:php-dev bash -c "php -d memory_limit=4G /app/vendor/phpunit/phpunit/phpunit --configuration /app/phpunit.xml ${allArgsExceptFirst}";
    exit 0;
fi

if [[ "${cmd}" = "eslint" ]]; then
    if [[ "${isMacOs}" = "provision" ]]; then
        docker run -it -v ${PWD}:/app -v buzzingpixel_node-modules-volume:/app/node_modules -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app ${nodeDockerImage} bash -c "node_modules/.bin/eslint assetsSource/js/*";
    else
        docker run -it -v ${PWD}:/app -v buzzingpixel_yarn-cache-volume:/usr/local/share/.cache/yarn -w /app ${nodeDockerImage} bash -c "node_modules/.bin/eslint assetsSource/js/*";
    fi
    exit 0;
fi

if [[ "${cmd}" = "cypress" ]]; then
    docker run -it -v ${PWD}:/e2e -w /e2e -e CYPRESS_baseUrl=https://buzzingpixel.localtest.me:26087/ --network=host ${cypressDockerImage};
    exit 0;
fi

if [[ "${cmd}" = "cypress-interactive" ]]; then
    ./platform/node_modules/.bin/cypress open
    exit 0;
fi

printf "${Red}Specified command not found${Reset}\n";
exit 1;
